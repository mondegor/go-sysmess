// Code generated by MockGen. DO NOT EDIT.
// Source: error_pure.go

// Package mock_mrerr is a generated GoMock package.
package mock_mrerr

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	mrmsg "github.com/mondegor/go-sysmess/mrmsg"
)

// Mocktranslator is a mock of translator interface.
type Mocktranslator struct {
	ctrl     *gomock.Controller
	recorder *MocktranslatorMockRecorder
}

// MocktranslatorMockRecorder is the mock recorder for Mocktranslator.
type MocktranslatorMockRecorder struct {
	mock *Mocktranslator
}

// NewMocktranslator creates a new mock instance.
func NewMocktranslator(ctrl *gomock.Controller) *Mocktranslator {
	mock := &Mocktranslator{ctrl: ctrl}
	mock.recorder = &MocktranslatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocktranslator) EXPECT() *MocktranslatorMockRecorder {
	return m.recorder
}

// HasErrorCode mocks base method.
func (m *Mocktranslator) HasErrorCode(code string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasErrorCode", code)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasErrorCode indicates an expected call of HasErrorCode.
func (mr *MocktranslatorMockRecorder) HasErrorCode(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasErrorCode", reflect.TypeOf((*Mocktranslator)(nil).HasErrorCode), code)
}

// TranslateError mocks base method.
func (m *Mocktranslator) TranslateError(code, defaultMessage string, args ...mrmsg.NamedArg) mrmsg.ErrorMessage {
	m.ctrl.T.Helper()
	varargs := []interface{}{code, defaultMessage}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TranslateError", varargs...)
	ret0, _ := ret[0].(mrmsg.ErrorMessage)
	return ret0
}

// TranslateError indicates an expected call of TranslateError.
func (mr *MocktranslatorMockRecorder) TranslateError(code, defaultMessage interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{code, defaultMessage}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslateError", reflect.TypeOf((*Mocktranslator)(nil).TranslateError), varargs...)
}

// MockcodeGetter is a mock of codeGetter interface.
type MockcodeGetter struct {
	ctrl     *gomock.Controller
	recorder *MockcodeGetterMockRecorder
}

// MockcodeGetterMockRecorder is the mock recorder for MockcodeGetter.
type MockcodeGetterMockRecorder struct {
	mock *MockcodeGetter
}

// NewMockcodeGetter creates a new mock instance.
func NewMockcodeGetter(ctrl *gomock.Controller) *MockcodeGetter {
	mock := &MockcodeGetter{ctrl: ctrl}
	mock.recorder = &MockcodeGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcodeGetter) EXPECT() *MockcodeGetterMockRecorder {
	return m.recorder
}

// Code mocks base method.
func (m *MockcodeGetter) Code() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Code")
	ret0, _ := ret[0].(string)
	return ret0
}

// Code indicates an expected call of Code.
func (mr *MockcodeGetterMockRecorder) Code() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Code", reflect.TypeOf((*MockcodeGetter)(nil).Code))
}
