// Code generated by MockGen. DO NOT EDIT.
// Source: error_proto.go

// Package mock_mrerr is a generated GoMock package.
package mock_mrerr

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStackTracer is a mock of StackTracer interface.
type MockStackTracer struct {
	ctrl     *gomock.Controller
	recorder *MockStackTracerMockRecorder
}

// MockStackTracerMockRecorder is the mock recorder for MockStackTracer.
type MockStackTracerMockRecorder struct {
	mock *MockStackTracer
}

// NewMockStackTracer creates a new mock instance.
func NewMockStackTracer(ctrl *gomock.Controller) *MockStackTracer {
	mock := &MockStackTracer{ctrl: ctrl}
	mock.recorder = &MockStackTracerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStackTracer) EXPECT() *MockStackTracerMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockStackTracer) Count() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockStackTracerMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockStackTracer)(nil).Count))
}

// FileLine mocks base method.
func (m *MockStackTracer) FileLine(index int) (string, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileLine", index)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// FileLine indicates an expected call of FileLine.
func (mr *MockStackTracerMockRecorder) FileLine(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileLine", reflect.TypeOf((*MockStackTracer)(nil).FileLine), index)
}
