// Code generated by MockGen. DO NOT EDIT.
// Source: event_emitter.go

// Package mock_mrevent is a generated GoMock package.
package mock_mrevent

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEmitter is a mock of Emitter interface.
type MockEmitter struct {
	ctrl     *gomock.Controller
	recorder *MockEmitterMockRecorder
}

// MockEmitterMockRecorder is the mock recorder for MockEmitter.
type MockEmitterMockRecorder struct {
	mock *MockEmitter
}

// NewMockEmitter creates a new mock instance.
func NewMockEmitter(ctrl *gomock.Controller) *MockEmitter {
	mock := &MockEmitter{ctrl: ctrl}
	mock.recorder = &MockEmitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmitter) EXPECT() *MockEmitterMockRecorder {
	return m.recorder
}

// Emit mocks base method.
func (m *MockEmitter) Emit(ctx context.Context, eventName string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, eventName}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Emit", varargs...)
}

// Emit indicates an expected call of Emit.
func (mr *MockEmitterMockRecorder) Emit(ctx, eventName interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, eventName}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Emit", reflect.TypeOf((*MockEmitter)(nil).Emit), varargs...)
}

// MockReceiver is a mock of Receiver interface.
type MockReceiver struct {
	ctrl     *gomock.Controller
	recorder *MockReceiverMockRecorder
}

// MockReceiverMockRecorder is the mock recorder for MockReceiver.
type MockReceiverMockRecorder struct {
	mock *MockReceiver
}

// NewMockReceiver creates a new mock instance.
func NewMockReceiver(ctrl *gomock.Controller) *MockReceiver {
	mock := &MockReceiver{ctrl: ctrl}
	mock.recorder = &MockReceiverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceiver) EXPECT() *MockReceiverMockRecorder {
	return m.recorder
}

// Receive mocks base method.
func (m *MockReceiver) Receive(ctx context.Context, eventName string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, eventName}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Receive", varargs...)
}

// Receive indicates an expected call of Receive.
func (mr *MockReceiverMockRecorder) Receive(ctx, eventName interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, eventName}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockReceiver)(nil).Receive), varargs...)
}
