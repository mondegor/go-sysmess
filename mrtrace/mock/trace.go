// Code generated by MockGen. DO NOT EDIT.
// Source: trace.go

// Package mock_mrtrace is a generated GoMock package.
package mock_mrtrace

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTracer is a mock of Tracer interface.
type MockTracer struct {
	ctrl     *gomock.Controller
	recorder *MockTracerMockRecorder
}

// MockTracerMockRecorder is the mock recorder for MockTracer.
type MockTracerMockRecorder struct {
	mock *MockTracer
}

// NewMockTracer creates a new mock instance.
func NewMockTracer(ctrl *gomock.Controller) *MockTracer {
	mock := &MockTracer{ctrl: ctrl}
	mock.recorder = &MockTracerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTracer) EXPECT() *MockTracerMockRecorder {
	return m.recorder
}

// Enabled mocks base method.
func (m *MockTracer) Enabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Enabled indicates an expected call of Enabled.
func (mr *MockTracerMockRecorder) Enabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enabled", reflect.TypeOf((*MockTracer)(nil).Enabled))
}

// Trace mocks base method.
func (m *MockTracer) Trace(ctx context.Context, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Trace", varargs...)
}

// Trace indicates an expected call of Trace.
func (mr *MockTracerMockRecorder) Trace(ctx interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trace", reflect.TypeOf((*MockTracer)(nil).Trace), varargs...)
}

// MockContextManager is a mock of ContextManager interface.
type MockContextManager struct {
	ctrl     *gomock.Controller
	recorder *MockContextManagerMockRecorder
}

// MockContextManagerMockRecorder is the mock recorder for MockContextManager.
type MockContextManagerMockRecorder struct {
	mock *MockContextManager
}

// NewMockContextManager creates a new mock instance.
func NewMockContextManager(ctrl *gomock.Controller) *MockContextManager {
	mock := &MockContextManager{ctrl: ctrl}
	mock.recorder = &MockContextManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContextManager) EXPECT() *MockContextManagerMockRecorder {
	return m.recorder
}

// ExtractCorrelationID mocks base method.
func (m *MockContextManager) ExtractCorrelationID(ctx context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractCorrelationID", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// ExtractCorrelationID indicates an expected call of ExtractCorrelationID.
func (mr *MockContextManagerMockRecorder) ExtractCorrelationID(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractCorrelationID", reflect.TypeOf((*MockContextManager)(nil).ExtractCorrelationID), ctx)
}

// ExtractKeysValues mocks base method.
func (m *MockContextManager) ExtractKeysValues(ctx context.Context) []any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractKeysValues", ctx)
	ret0, _ := ret[0].([]any)
	return ret0
}

// ExtractKeysValues indicates an expected call of ExtractKeysValues.
func (mr *MockContextManagerMockRecorder) ExtractKeysValues(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractKeysValues", reflect.TypeOf((*MockContextManager)(nil).ExtractKeysValues), ctx)
}

// NewContextWithIDs mocks base method.
func (m *MockContextManager) NewContextWithIDs(originalCtx context.Context) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewContextWithIDs", originalCtx)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// NewContextWithIDs indicates an expected call of NewContextWithIDs.
func (mr *MockContextManagerMockRecorder) NewContextWithIDs(originalCtx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewContextWithIDs", reflect.TypeOf((*MockContextManager)(nil).NewContextWithIDs), originalCtx)
}

// ProcessID mocks base method.
func (m *MockContextManager) ProcessID(ctx context.Context, key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessID", ctx, key)
	ret0, _ := ret[0].(string)
	return ret0
}

// ProcessID indicates an expected call of ProcessID.
func (mr *MockContextManagerMockRecorder) ProcessID(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessID", reflect.TypeOf((*MockContextManager)(nil).ProcessID), ctx, key)
}

// WithGeneratedProcessID mocks base method.
func (m *MockContextManager) WithGeneratedProcessID(ctx context.Context, key string) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithGeneratedProcessID", ctx, key)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// WithGeneratedProcessID indicates an expected call of WithGeneratedProcessID.
func (mr *MockContextManagerMockRecorder) WithGeneratedProcessID(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithGeneratedProcessID", reflect.TypeOf((*MockContextManager)(nil).WithGeneratedProcessID), ctx, key)
}

// WithProcessID mocks base method.
func (m *MockContextManager) WithProcessID(ctx context.Context, key, value string) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithProcessID", ctx, key, value)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// WithProcessID indicates an expected call of WithProcessID.
func (mr *MockContextManagerMockRecorder) WithProcessID(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithProcessID", reflect.TypeOf((*MockContextManager)(nil).WithProcessID), ctx, key, value)
}
